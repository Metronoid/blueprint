// Dashboard Types
export interface Dashboard {
    title: string;
    description: string;
    theme: DashboardTheme;
    navigation: NavigationItem[];
    widgets: Record<string, WidgetData>;
    permissions: string[];
    settings: DashboardSettings;
    metadata: DashboardMetadata;
}

export interface DashboardTheme {
    primary_color: string;
    secondary_color: string;
    accent_color: string;
    background_color: string;
    text_color: string;
    border_color: string;
    success_color: string;
    warning_color: string;
    error_color: string;
}

export interface NavigationItem {
    name: string;
    title: string;
    route: string;
    icon: string;
    permission?: string;
    plugin?: string;
    children?: NavigationItem[];
}

export interface WidgetData {
    data: any;
    config: WidgetConfig;
    loading?: boolean;
    error?: string | null;
    metadata?: WidgetMetadata;
}

export interface WidgetConfig {
    type: WidgetType;
    title: string;
    format?: string;
    color?: string;
    limit?: number;
    sort_by?: string;
    sort_order?: 'asc' | 'desc';
    chart_type?: string;
    timeframe?: string;
    columns?: string[];
    filters?: string[];
    actions?: WidgetAction[];
    aggregation?: 'count' | 'sum' | 'avg' | 'max' | 'min';
    column?: string;
    group_by?: string;
}

export type WidgetType = 'metric' | 'table' | 'chart' | 'list' | 'custom';

export interface WidgetAction {
    name: string;
    label: string;
    type: 'button' | 'link' | 'dropdown';
    url?: string;
    method?: 'GET' | 'POST' | 'PUT' | 'DELETE';
    data?: Record<string, any>;
}

export interface WidgetMetadata {
    generated_at: string;
    widget_name: string;
    cache_key: string;
    plugin?: string;
    plugin_version?: string;
    error_type?: string;
}

export interface DashboardSettings {
    cache_enabled: boolean;
    cache_ttl: number;
    auto_refresh: boolean;
    refresh_interval: number;
    debug_mode: boolean;
}

export interface DashboardMetadata {
    generated_at: string;
    cache_key: string;
    version: string;
}

// Plugin Types
export interface Plugin {
    name: string;
    description: string;
    version: string;
    enabled: boolean;
    widgets: Record<string, WidgetConfig>;
    navigation: NavigationItem[];
    permissions: string[];
    api_endpoints: Record<string, string>;
    settings: Record<string, any>;
    health: PluginHealth;
}

export interface PluginHealth {
    status: 'healthy' | 'warning' | 'error' | 'disabled';
    message: string;
    last_check: string;
    version?: string;
    enabled?: boolean;
}

export interface PluginAction {
    plugin: string;
    action: string;
    data?: Record<string, any>;
}

// API Types
export interface ApiResponse<T = any> {
    success: boolean;
    data?: T;
    error?: string;
    message?: string;
}

export interface DashboardApiResponse {
    dashboard: Dashboard;
    widgets: Record<string, WidgetData>;
    plugins: Plugin[];
    stats: DashboardStats;
}

export interface WidgetApiResponse {
    data: any;
    config: WidgetConfig;
    count?: number;
    last_updated?: string;
    type: WidgetType;
}

export interface DashboardStats {
    total_widgets: number;
    active_plugins: number;
    total_users: number;
    total_records: Record<string, number>;
    system_health: SystemHealth;
    performance: PerformanceMetrics;
}

export interface SystemHealth {
    status: 'healthy' | 'warning' | 'error';
    database: HealthStatus;
    cache: HealthStatus;
    plugins: HealthStatus;
    last_check: string;
}

export interface HealthStatus {
    status: 'connected' | 'disconnected' | 'working' | 'failed';
    response_time?: number;
    hit_rate?: number;
    error?: string;
}

export interface PerformanceMetrics {
    response_time: number;
    memory_usage: MemoryUsage;
    cache_hit_rate: number;
}

export interface MemoryUsage {
    peak: number;
    current: number;
    limit: string;
}

// Store Types
export interface DashboardState {
    // Widget data state
    {{ widgetTypes }}
    
    // Dashboard state
    dashboard: Dashboard | null;
    
    // Loading and error states
    loading: boolean;
    error: string | null;
    
    // Plugin state
    plugins: Plugin[];
    pluginData: Record<string, any>;
    
    // Cache state
    cache: Record<string, any>;
    lastRefresh: Date | null;
    
    // Actions
    fetchWidgetData: () => Promise<DashboardApiResponse>;
    refreshData: () => Promise<void>;
    setDashboard: (dashboard: Dashboard) => void;
    setWidgetData: (widgetName: string, data: WidgetData) => void;
    setLoading: (loading: boolean) => void;
    setError: (error: string | null) => void;
    clearError: () => void;
    
    // Plugin actions
    setPlugins: (plugins: Plugin[]) => void;
    setPluginData: (pluginName: string, data: any) => void;
    
    // Widget actions
    refreshWidget: (widgetName: string) => Promise<void>;
    updateWidgetConfig: (widgetName: string, config: WidgetConfig) => void;
    
    // Cache actions
    setCache: (key: string, value: any) => void;
    getCache: (key: string) => any;
    clearCache: () => void;
}

// Component Props Types
export interface DashboardLayoutProps {
    children: React.ReactNode;
    dashboard: Dashboard;
    user?: User;
}

export interface DashboardPageProps {
    dashboard: Dashboard;
    widgets: Record<string, WidgetData>;
    user?: User;
}

export interface WidgetComponentProps {
    data: any;
    config: WidgetConfig;
    onRefresh?: () => void;
    onAction?: (action: string, data: any) => void;
}

export interface User {
    id: number;
    name: string;
    email: string;
    avatar?: string;
    permissions: string[];
}

// Event Types
export interface DashboardEvent {
    type: 'widget_updated' | 'plugin_enabled' | 'plugin_disabled' | 'theme_changed' | 'data_refreshed';
    data: any;
    timestamp: string;
}

// Plugin Integration Types
export interface PluginIntegration {
    getData: () => Promise<Record<string, Plugin>>;
    getWidgets: () => Promise<Record<string, WidgetConfig>>;
    getNavigation: () => Promise<NavigationItem[]>;
    executeAction: (action: PluginAction) => Promise<ApiResponse>;
}

// Utility Types
export type DashboardConfig = {
    title: string;
    description: string;
    layout: string;
    theme: DashboardTheme;
    permissions: string[];
    navigation: NavigationItem[];
    widgets: Record<string, WidgetConfig>;
};

export type WidgetPosition = {
    area: string;
    x?: number;
    y?: number;
    width?: number;
    height?: number;
};

// Hook Types
export interface UseDashboardReturn {
    dashboard: Dashboard | null;
    loading: boolean;
    error: string | null;
    refreshData: () => Promise<void>;
    clearError: () => void;
}

export interface UseWidgetReturn {
    data: WidgetData | null;
    loading: boolean;
    error: string | null;
    refresh: () => Promise<void>;
    updateConfig: (config: Partial<WidgetConfig>) => void;
}

export interface UsePluginReturn {
    plugins: Plugin[];
    loading: boolean;
    error: string | null;
    enablePlugin: (pluginName: string) => Promise<void>;
    disablePlugin: (pluginName: string) => Promise<void>;
    updatePluginConfig: (pluginName: string, config: any) => Promise<void>;
}

// Form Types
export interface DashboardFormData {
    title: string;
    description: string;
    theme: DashboardTheme;
    navigation: NavigationItem[];
    widgets: Record<string, WidgetConfig>;
    permissions: string[];
    settings: DashboardSettings;
}

export interface WidgetFormData {
    name: string;
    type: WidgetType;
    title: string;
    config: WidgetConfig;
}

export interface PluginFormData {
    name: string;
    enabled: boolean;
    settings: Record<string, any>;
}

// Filter Types
export interface DashboardFilter {
    search?: string;
    type?: WidgetType;
    plugin?: string;
    status?: 'active' | 'inactive' | 'error';
}

export interface WidgetFilter {
    search?: string;
    type?: WidgetType;
    plugin?: string;
    status?: 'active' | 'error';
}

// Sort Types
export interface SortOption {
    field: string;
    direction: 'asc' | 'desc';
}

// Pagination Types
export interface PaginationMeta {
    current_page: number;
    per_page: number;
    total: number;
    last_page: number;
}

export interface PaginatedResponse<T> {
    data: T[];
    meta: PaginationMeta;
}

// Chart Types
export interface ChartData {
    labels: string[];
    datasets: ChartDataset[];
}

export interface ChartDataset {
    label: string;
    data: number[];
    backgroundColor?: string;
    borderColor?: string;
    borderWidth?: number;
}

export interface ChartOptions {
    responsive: boolean;
    maintainAspectRatio: boolean;
    scales?: {
        x?: any;
        y?: any;
    };
}

// Notification Types
export interface Notification {
    id: string;
    type: 'info' | 'success' | 'warning' | 'error';
    title: string;
    message: string;
    timestamp: string;
    read: boolean;
    action?: {
        label: string;
        url: string;
    };
}

// Log Types
export interface LogEntry {
    id: string;
    level: 'debug' | 'info' | 'warning' | 'error';
    message: string;
    context: Record<string, any>;
    timestamp: string;
    user_id?: number;
}

// Backup Types
export interface Backup {
    id: string;
    name: string;
    size: number;
    created_at: string;
    status: 'completed' | 'failed' | 'in_progress';
    type: 'full' | 'incremental';
}

// Analytics Types
export interface AnalyticsData {
    period: string;
    metrics: Record<string, number>;
    trends: Record<string, TrendData>;
    breakdown: Record<string, any>;
}

export interface TrendData {
    current: number;
    previous: number;
    change: number;
    percentage: number;
    direction: 'up' | 'down' | 'neutral';
}

// Export/Import Types
export interface ExportData {
    dashboard: Dashboard;
    widgets: Record<string, WidgetData>;
    plugins: Plugin[];
    settings: DashboardSettings;
    metadata: {
        exported_at: string;
        version: string;
        exported_by: string;
    };
}

// Webhook Types
export interface WebhookEvent {
    type: string;
    data: any;
    timestamp: string;
    signature?: string;
}

// Cache Types
export interface CacheEntry<T = any> {
    value: T;
    timestamp: number;
    ttl: number;
}

export interface CacheStatus {
    enabled: boolean;
    hit_rate: number;
    size: number;
    last_clear: string;
}

// Error Types
export interface DashboardError {
    code: string;
    message: string;
    details?: any;
    timestamp: string;
    user_id?: number;
}

// Validation Types
export interface ValidationError {
    field: string;
    message: string;
    code: string;
}

export interface ValidationResult {
    valid: boolean;
    errors: ValidationError[];
}

// Permission Types
export interface Permission {
    name: string;
    description: string;
    category: string;
    granted: boolean;
}

export interface Role {
    name: string;
    description: string;
    permissions: string[];
}

// Theme Types
export interface ThemePreset {
    name: string;
    label: string;
    theme: DashboardTheme;
    preview?: string;
}

// Widget Position Types
export interface GridPosition {
    x: number;
    y: number;
    w: number;
    h: number;
    minW?: number;
    minH?: number;
    maxW?: number;
    maxH?: number;
}

export interface LayoutItem {
    i: string;
    x: number;
    y: number;
    w: number;
    h: number;
    minW?: number;
    minH?: number;
    maxW?: number;
    maxH?: number;
    static?: boolean;
    isDraggable?: boolean;
    isResizable?: boolean;
}

// Auto-refresh Types
export interface AutoRefreshConfig {
    enabled: boolean;
    interval: number;
    widgets: string[];
}

// Search Types
export interface SearchResult {
    type: 'widget' | 'plugin' | 'navigation' | 'setting';
    id: string;
    title: string;
    description?: string;
    url?: string;
    relevance: number;
}

export interface SearchOptions {
    query: string;
    types?: string[];
    limit?: number;
    offset?: number;
}

// API Endpoint Types
export interface ApiEndpoint {
    method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';
    path: string;
    description: string;
    parameters?: ApiParameter[];
    responses?: ApiResponse[];
    authentication?: boolean;
}

export interface ApiParameter {
    name: string;
    type: string;
    required: boolean;
    description: string;
    default?: any;
}

// Documentation Types
export interface ApiDocumentation {
    title: string;
    version: string;
    description: string;
    endpoints: ApiEndpoint[];
    schemas: Record<string, any>;
}

// Health Check Types
export interface HealthCheck {
    name: string;
    status: 'healthy' | 'warning' | 'error';
    message: string;
    details?: any;
    last_check: string;
    response_time?: number;
}

export interface HealthReport {
    overall_status: 'healthy' | 'warning' | 'error';
    checks: HealthCheck[];
    timestamp: string;
    version: string;
} 