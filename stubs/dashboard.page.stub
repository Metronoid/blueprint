import React from 'react';
import { Head } from '@inertiajs/react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Skeleton } from '@/components/ui/skeleton';
import { 
    RefreshCw, 
    TrendingUp, 
    TrendingDown, 
    Minus,
    AlertCircle,
    CheckCircle,
    BarChart3
} from 'lucide-react';
import { useDashboardStore } from '@/stores/dashboardStore';
import { cn } from '@/lib/utils';

interface DashboardPageProps {
    dashboard: any;
    widgets: Record<string, any>;
    user?: any;
}

export default function {{ dashboardName }}Page({ dashboard, widgets, user }: DashboardPageProps) {
    const { loading, error, refreshData, refreshWidget } = useDashboardStore();

    React.useEffect(() => {
        // Refresh data on mount
        refreshData();
    }, [refreshData]);

    const handleWidgetRefresh = async (widgetName: string) => {
        await refreshWidget(widgetName);
    };

    const getTrendIcon = (trend: any) => {
        if (!trend) return Minus;
        
        switch (trend.direction) {
            case 'up':
                return TrendingUp;
            case 'down':
                return TrendingDown;
            default:
                return Minus;
        }
    };

    const getTrendColor = (trend: any) => {
        if (!trend) return 'text-muted-foreground';
        
        switch (trend.direction) {
            case 'up':
                return 'text-green-600';
            case 'down':
                return 'text-red-600';
            default:
                return 'text-muted-foreground';
        }
    };

    const formatValue = (value: any, format: string = 'number') => {
        switch (format) {
            case 'currency':
                return new Intl.NumberFormat('en-US', {
                    style: 'currency',
                    currency: 'USD'
                }).format(value);
            case 'percentage':
                return `${value}%`;
            case 'number':
                return new Intl.NumberFormat('en-US').format(value);
            default:
                return value;
        }
    };

    const renderWidget = (widgetName: string, widgetData: any) => {
        const { data, config, error: widgetError, loading: widgetLoading } = widgetData;
        const widgetConfig = dashboard?.widgets?.[widgetName] || {};

        if (widgetError) {
            return (
                <Card key={widgetName} className="border-destructive/50">
                    <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                        <CardTitle className="text-sm font-medium">
                            {widgetConfig.title || widgetName}
                        </CardTitle>
                        <AlertCircle className="h-4 w-4 text-destructive" />
                    </CardHeader>
                    <CardContent>
                        <div className="text-sm text-destructive">
                            {widgetError}
                        </div>
                    </CardContent>
                </Card>
            );
        }

        switch (widgetConfig.type) {
            case 'metric':
                return (
                    <Card key={widgetName}>
                        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                            <CardTitle className="text-sm font-medium">
                                {widgetConfig.title || widgetName}
                            </CardTitle>
                            <Button
                                variant="ghost"
                                size="sm"
                                onClick={() => handleWidgetRefresh(widgetName)}
                                disabled={widgetLoading}
                            >
                                <RefreshCw className={cn("h-4 w-4", widgetLoading && "animate-spin")} />
                            </Button>
                        </CardHeader>
                        <CardContent>
                            {widgetLoading ? (
                                <Skeleton className="h-8 w-24" />
                            ) : (
                                <div className="space-y-2">
                                    <div className="text-2xl font-bold">
                                        {formatValue(data?.value, data?.format)}
                                        {data?.unit && (
                                            <span className="text-sm font-normal text-muted-foreground ml-1">
                                                {data.unit}
                                            </span>
                                        )}
                                    </div>
                                    {data?.trend && (
                                        <div className="flex items-center space-x-1">
                                            {React.createElement(getTrendIcon(data.trend), {
                                                className: cn("h-4 w-4", getTrendColor(data.trend))
                                            })}
                                            <span className={cn("text-sm", getTrendColor(data.trend))}>
                                                {data.trend.percentage}%
                                            </span>
                                            <span className="text-sm text-muted-foreground">
                                                from last period
                                            </span>
                                        </div>
                                    )}
                                </div>
                            )}
                        </CardContent>
                    </Card>
                );

            case 'table':
                return (
                    <Card key={widgetName}>
                        <CardHeader>
                            <CardTitle className="text-sm font-medium">
                                {widgetConfig.title || widgetName}
                            </CardTitle>
                            <CardDescription>
                                {data?.pagination?.total || 0} total records
                            </CardDescription>
                        </CardHeader>
                        <CardContent>
                            {widgetLoading ? (
                                <div className="space-y-2">
                                    {Array.from({ length: 5 }).map((_, i) => (
                                        <Skeleton key={i} className="h-4 w-full" />
                                    ))}
                                </div>
                            ) : (
                                <div className="space-y-2">
                                    {data?.data?.map((row: any, index: number) => (
                                        <div key={index} className="flex items-center justify-between py-2">
                                            <div className="space-y-1">
                                                <p className="text-sm font-medium leading-none">
                                                    {row.name || row.title || `Row ${index + 1}`}
                                                </p>
                                                <p className="text-xs text-muted-foreground">
                                                    {row.description || row.email || row.created_at}
                                                </p>
                                            </div>
                                            <Badge variant="secondary">
                                                {row.status || row.type || 'Active'}
                                            </Badge>
                                        </div>
                                    ))}
                                </div>
                            )}
                        </CardContent>
                    </Card>
                );

            case 'chart':
                return (
                    <Card key={widgetName}>
                        <CardHeader>
                            <CardTitle className="text-sm font-medium">
                                {widgetConfig.title || widgetName}
                            </CardTitle>
                            <CardDescription>
                                {data?.type || 'chart'} visualization
                            </CardDescription>
                        </CardHeader>
                        <CardContent>
                            {widgetLoading ? (
                                <Skeleton className="h-48 w-full" />
                            ) : (
                                <div className="h-48 flex items-center justify-center">
                                    <div className="text-center">
                                        <BarChart3 className="h-8 w-8 text-muted-foreground mx-auto mb-2" />
                                        <p className="text-sm text-muted-foreground">
                                            Chart data would be rendered here
                                        </p>
                                        <p className="text-xs text-muted-foreground">
                                            {data?.data?.length || 0} data points
                                        </p>
                                    </div>
                                </div>
                            )}
                        </CardContent>
                    </Card>
                );

            case 'list':
                return (
                    <Card key={widgetName}>
                        <CardHeader>
                            <CardTitle className="text-sm font-medium">
                                {widgetConfig.title || widgetName}
                            </CardTitle>
                            <CardDescription>
                                {data?.total || 0} items
                            </CardDescription>
                        </CardHeader>
                        <CardContent>
                            {widgetLoading ? (
                                <div className="space-y-2">
                                    {Array.from({ length: 3 }).map((_, i) => (
                                        <Skeleton key={i} className="h-4 w-full" />
                                    ))}
                                </div>
                            ) : (
                                <div className="space-y-2">
                                    {data?.items?.map((item: any, index: number) => (
                                        <div key={index} className="flex items-center space-x-2">
                                            <div className="w-2 h-2 bg-blue-500 rounded-full" />
                                            <span className="text-sm">{item.name || item.title}</span>
                                            <Badge variant="outline" className="ml-auto">
                                                {item.status || item.type}
                                            </Badge>
                                        </div>
                                    ))}
                                </div>
                            )}
                        </CardContent>
                    </Card>
                );

            default:
                return (
                    <Card key={widgetName}>
                        <CardHeader>
                            <CardTitle className="text-sm font-medium">
                                {widgetConfig.title || widgetName}
                            </CardTitle>
                        </CardHeader>
                        <CardContent>
                            <div className="text-sm text-muted-foreground">
                                Custom widget content
                            </div>
                        </CardContent>
                    </Card>
                );
        }
    };

    return (
        <>
            <Head title={dashboard?.title || 'Dashboard'} />
            
            <div className="space-y-6">
                {/* Header */}
                <div className="flex items-center justify-between">
                    <div>
                        <h1 className="text-3xl font-bold tracking-tight">
                            {dashboard?.title || 'Dashboard'}
                        </h1>
                        <p className="text-muted-foreground">
                            {dashboard?.description || 'Overview of your application'}
                        </p>
                    </div>
                    <div className="flex items-center space-x-2">
                        <Button
                            variant="outline"
                            onClick={refreshData}
                            disabled={loading}
                        >
                            <RefreshCw className={cn("h-4 w-4 mr-2", loading && "animate-spin")} />
                            Refresh
                        </Button>
                    </div>
                </div>

                {/* Error banner */}
                {error && (
                    <Card className="border-destructive/50">
                        <CardContent className="pt-6">
                            <div className="flex items-center space-x-2">
                                <AlertCircle className="h-4 w-4 text-destructive" />
                                <span className="text-sm text-destructive">{error}</span>
                            </div>
                        </CardContent>
                    </Card>
                )}

                {/* Widgets Grid */}
                <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
                    {Object.entries(widgets).map(([widgetName, widgetData]) => 
                        renderWidget(widgetName, widgetData)
                    )}
                </div>

                {/* Plugin Widgets */}
                {{ pluginWidgets }}

                {/* API Integration */}
                {{ api }}

                {/* Loading state */}
                {loading && (
                    <div className="flex items-center justify-center py-8">
                        <div className="flex items-center space-x-2">
                            <RefreshCw className="h-4 w-4 animate-spin" />
                            <span className="text-sm text-muted-foreground">
                                Loading dashboard data...
                            </span>
                        </div>
                    </div>
                )}
            </div>
        </>
    );
} 