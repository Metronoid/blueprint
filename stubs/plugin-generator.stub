<?php

namespace {{ namespace }};

use Blueprint\Contracts\Plugin;
use Blueprint\Plugin\AbstractPluginGenerator;
use Blueprint\Tree;
use Illuminate\Filesystem\Filesystem;

class {{ class }} extends AbstractPluginGenerator
{
    protected int $priority = 100;
    protected array $types = ['{{ types }}'];

    public function __construct(Filesystem $filesystem, Plugin $plugin)
    {
        parent::__construct($filesystem, $plugin);
    }

    /**
     * Generate output for the given tree.
     */
    public function output(Tree $tree): array
    {
        $output = [];

        // TODO: Implement your generator logic here
        // Example:
        // foreach ($tree->models() as $model) {
        //     $output['path/to/files'][] = $this->generateForModel($model);
        // }

        return $output;
    }

    /**
     * Check if this generator should run for the given tree.
     */
    public function shouldRun(Tree $tree): bool
    {
        // TODO: Implement your custom logic here
        // Example:
        // return !empty($tree->models()) && $this->config('enabled', true);
        
        return parent::shouldRun($tree);
    }

    /**
     * Get the generator name.
     */
    public function getName(): string
    {
        return '{{ name }}';
    }

    /**
     * Get the generator description.
     */
    public function getDescription(): string
    {
        return '{{ description }}';
    }

    // TODO: Add your custom methods here
    // Example:
    // protected function generateForModel(Model $model): string
    // {
    //     $stub = $this->filesystem->get($this->getStubPath());
    //     
    //     $stub = str_replace('{{ modelName }}', $model->name(), $stub);
    //     // ... more replacements
    //     
    //     return $stub;
    // }
    //
    // protected function getStubPath(): string
    // {
    //     return __DIR__ . '/stubs/your-template.stub';
    // }
} 