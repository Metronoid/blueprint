import React from 'react';
import { Link, usePage } from '@inertiajs/react';
import { 
    LayoutDashboard, 
    Settings, 
    Users, 
    BarChart3, 
    Activity,
    Bell,
    Search,
    Menu,
    X
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { 
    DropdownMenu, 
    DropdownMenuContent, 
    DropdownMenuItem, 
    DropdownMenuLabel, 
    DropdownMenuSeparator, 
    DropdownMenuTrigger 
} from '@/components/ui/dropdown-menu';
import { Sheet, SheetContent, SheetTrigger } from '@/components/ui/sheet';
import { useDashboardStore } from '@/stores/dashboardStore';
import { useTheme } from '@/hooks/useTheme';
import { cn } from '@/lib/utils';

interface DashboardLayoutProps {
    children: React.ReactNode;
    dashboard: any;
    user?: any;
}

export default function DashboardLayout({ children, dashboard, user }: DashboardLayoutProps) {
    const { theme } = useTheme();
    const { loading, error, refreshData } = useDashboardStore();
    const [sidebarOpen, setSidebarOpen] = React.useState(false);
    const [searchQuery, setSearchQuery] = React.useState('');

    const navigation = dashboard?.navigation || [];
    const permissions = dashboard?.permissions || [];

    const hasPermission = (permission: string) => {
        return permissions.includes(permission) || user?.permissions?.includes(permission);
    };

    const filteredNavigation = navigation.filter((item: any) => {
        if (item.permission && !hasPermission(item.permission)) {
            return false;
        }
        if (searchQuery && !item.title.toLowerCase().includes(searchQuery.toLowerCase())) {
            return false;
        }
        return true;
    });

    return (
        <div className="min-h-screen bg-background">
            {/* Header */}
            <header className="sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
                <div className="container flex h-14 items-center">
                    <div className="mr-4 hidden md:flex">
                        <Link href="/" className="mr-6 flex items-center space-x-2">
                            <LayoutDashboard className="h-6 w-6" />
                            <span className="hidden font-bold sm:inline-block">
                                {dashboard?.title || 'Dashboard'}
                            </span>
                        </Link>
                    </div>

                    {/* Mobile menu button */}
                    <Sheet open={sidebarOpen} onOpenChange={setSidebarOpen}>
                        <SheetTrigger asChild>
                            <Button
                                variant="ghost"
                                className="mr-2 px-0 text-base hover:bg-transparent focus-visible:bg-transparent focus-visible:ring-0 focus-visible:ring-offset-0 md:hidden"
                            >
                                <Menu className="h-5 w-5" />
                                <span className="sr-only">Toggle menu</span>
                            </Button>
                        </SheetTrigger>
                        <SheetContent side="left" className="pl-1 pr-0">
                            <MobileNav 
                                navigation={filteredNavigation}
                                dashboard={dashboard}
                                onClose={() => setSidebarOpen(false)}
                            />
                        </SheetContent>
                    </Sheet>

                    {/* Search */}
                    <div className="flex-1">
                        <div className="relative w-full max-w-sm">
                            <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
                            <Input
                                type="search"
                                placeholder="Search..."
                                className="pl-8"
                                value={searchQuery}
                                onChange={(e) => setSearchQuery(e.target.value)}
                            />
                        </div>
                    </div>

                    {/* Header actions */}
                    <div className="flex items-center space-x-2">
                        {/* Refresh button */}
                        <Button
                            variant="ghost"
                            size="sm"
                            onClick={refreshData}
                            disabled={loading}
                        >
                            <Activity className="h-4 w-4" />
                        </Button>

                        {/* Notifications */}
                        <DropdownMenu>
                            <DropdownMenuTrigger asChild>
                                <Button variant="ghost" size="sm">
                                    <Bell className="h-4 w-4" />
                                    <Badge className="ml-1 h-2 w-2 rounded-full bg-red-500" />
                                </Button>
                            </DropdownMenuTrigger>
                            <DropdownMenuContent align="end" className="w-80">
                                <DropdownMenuLabel>Notifications</DropdownMenuLabel>
                                <DropdownMenuSeparator />
                                <div className="max-h-60 overflow-y-auto">
                                    {/* Notification items would go here */}
                                    <DropdownMenuItem>
                                        <div className="flex flex-col space-y-1">
                                            <p className="text-sm font-medium">Dashboard updated</p>
                                            <p className="text-xs text-muted-foreground">
                                                New data available for your widgets
                                            </p>
                                        </div>
                                    </DropdownMenuItem>
                                </div>
                            </DropdownMenuContent>
                        </DropdownMenu>

                        {/* User menu */}
                        {user && (
                            <DropdownMenu>
                                <DropdownMenuTrigger asChild>
                                    <Button variant="ghost" className="relative h-8 w-8 rounded-full">
                                        <Avatar className="h-8 w-8">
                                            <AvatarImage src={user.avatar} alt={user.name} />
                                            <AvatarFallback>
                                                {user.name?.charAt(0)?.toUpperCase()}
                                            </AvatarFallback>
                                        </Avatar>
                                    </Button>
                                </DropdownMenuTrigger>
                                <DropdownMenuContent className="w-56" align="end" forceMount>
                                    <DropdownMenuLabel className="font-normal">
                                        <div className="flex flex-col space-y-1">
                                            <p className="text-sm font-medium leading-none">{user.name}</p>
                                            <p className="text-xs leading-none text-muted-foreground">
                                                {user.email}
                                            </p>
                                        </div>
                                    </DropdownMenuLabel>
                                    <DropdownMenuSeparator />
                                    <DropdownMenuItem asChild>
                                        <Link href="/profile">Profile</Link>
                                    </DropdownMenuItem>
                                    <DropdownMenuItem asChild>
                                        <Link href="/settings">Settings</Link>
                                    </DropdownMenuItem>
                                    <DropdownMenuSeparator />
                                    <DropdownMenuItem asChild>
                                        <Link href="/logout" method="post" as="button">
                                            Log out
                                        </Link>
                                    </DropdownMenuItem>
                                </DropdownMenuContent>
                            </DropdownMenu>
                        )}
                    </div>
                </div>
            </header>

            <div className="container flex-1 items-start md:grid md:grid-cols-[220px_minmax(0,1fr)] md:gap-6 lg:grid-cols-[240px_minmax(0,1fr)] lg:gap-10">
                {/* Sidebar */}
                <aside className="fixed top-14 z-30 -ml-2 hidden h-[calc(100vh-3.5rem)] w-full shrink-0 overflow-y-auto border-r md:sticky md:block">
                    <nav className="grid items-start px-2 py-4 text-sm font-medium">
                        <SidebarNav 
                            navigation={filteredNavigation}
                            dashboard={dashboard}
                        />
                    </nav>
                </aside>

                {/* Main content */}
                <main className="flex w-full flex-col overflow-hidden">
                    {/* Error banner */}
                    {error && (
                        <div className="border-b bg-destructive/10 px-4 py-2 text-sm text-destructive">
                            <div className="flex items-center justify-between">
                                <span>{error}</span>
                                <Button
                                    variant="ghost"
                                    size="sm"
                                    onClick={() => window.location.reload()}
                                >
                                    Retry
                                </Button>
                            </div>
                        </div>
                    )}

                    {/* Loading indicator */}
                    {loading && (
                        <div className="border-b bg-muted/50 px-4 py-2 text-sm text-muted-foreground">
                            <div className="flex items-center space-x-2">
                                <Activity className="h-4 w-4 animate-spin" />
                                <span>Loading dashboard data...</span>
                            </div>
                        </div>
                    )}

                    {/* Page content */}
                    <div className="flex-1 space-y-4 p-4 pt-6">
                        {children}
                    </div>
                </main>
            </div>

            {/* Plugin integration */}
            {{ pluginIntegration }}
        </div>
    );
}

interface SidebarNavProps {
    navigation: any[];
    dashboard: any;
}

function SidebarNav({ navigation, dashboard }: SidebarNavProps) {
    const { url } = usePage();
    const currentPath = url;

    return (
        <div className="space-y-2">
            {navigation.map((item: any) => {
                const isActive = currentPath === item.route;
                const Icon = getIconComponent(item.icon);

                return (
                    <Link
                        key={item.name}
                        href={item.route}
                        className={cn(
                            "flex items-center space-x-2 rounded-lg px-3 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground",
                            isActive ? "bg-accent text-accent-foreground" : "text-muted-foreground"
                        )}
                    >
                        {Icon && <Icon className="h-4 w-4" />}
                        <span>{item.title}</span>
                        {item.badge && (
                            <Badge variant="secondary" className="ml-auto">
                                {item.badge}
                            </Badge>
                        )}
                    </Link>
                );
            })}
        </div>
    );
}

interface MobileNavProps {
    navigation: any[];
    dashboard: any;
    onClose: () => void;
}

function MobileNav({ navigation, dashboard, onClose }: MobileNavProps) {
    const { url } = usePage();
    const currentPath = url;

    return (
        <div className="flex flex-col space-y-4">
            <div className="flex items-center justify-between">
                <Link href="/" className="flex items-center space-x-2" onClick={onClose}>
                    <LayoutDashboard className="h-6 w-6" />
                    <span className="font-bold">{dashboard?.title || 'Dashboard'}</span>
                </Link>
                <Button variant="ghost" size="sm" onClick={onClose}>
                    <X className="h-4 w-4" />
                </Button>
            </div>
            <nav className="grid items-start space-y-2">
                {navigation.map((item: any) => {
                    const isActive = currentPath === item.route;
                    const Icon = getIconComponent(item.icon);

                    return (
                        <Link
                            key={item.name}
                            href={item.route}
                            className={cn(
                                "flex items-center space-x-2 rounded-lg px-3 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground",
                                isActive ? "bg-accent text-accent-foreground" : "text-muted-foreground"
                            )}
                            onClick={onClose}
                        >
                            {Icon && <Icon className="h-4 w-4" />}
                            <span>{item.title}</span>
                            {item.badge && (
                                <Badge variant="secondary" className="ml-auto">
                                    {item.badge}
                                </Badge>
                            )}
                        </Link>
                    );
                })}
            </nav>
        </div>
    );
}

function getIconComponent(iconName: string) {
    const iconMap: Record<string, any> = {
        home: LayoutDashboard,
        users: Users,
        settings: Settings,
        chart: BarChart3,
        activity: Activity,
    };

    return iconMap[iconName] || LayoutDashboard;
} 