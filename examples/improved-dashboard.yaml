models:
  User:
    name: string:400
    email: string:400 unique
    email_verified_at: timestamp nullable
    password: string
    remember_token: string:100 nullable
    created_at: timestamp
    updated_at: timestamp
    timestamps: true
    relationships:
      hasMany: Post
      hasMany: Comment
      hasMany: Order

  Post:
    title: string:400
    content: text
    published_at: timestamp nullable
    author_id: id:unsigned
    status: enum:['draft', 'published', 'archived']
    created_at: timestamp
    updated_at: timestamp
    timestamps: true
    relationships:
      belongsTo: User
      hasMany: Comment

  Comment:
    content: text
    post_id: id:unsigned
    user_id: id:unsigned
    approved: boolean default:false
    created_at: timestamp
    updated_at: timestamp
    timestamps: true
    relationships:
      belongsTo: Post
      belongsTo: User

  Order:
    order_number: string:100 unique
    user_id: id:unsigned
    total_amount: decimal:10,2
    status: enum:['pending', 'processing', 'shipped', 'delivered', 'cancelled']
    shipping_address: text
    billing_address: text
    created_at: timestamp
    updated_at: timestamp
    timestamps: true
    relationships:
      belongsTo: User
      hasMany: OrderItem

  OrderItem:
    order_id: id:unsigned
    product_name: string:400
    quantity: integer
    unit_price: decimal:8,2
    total_price: decimal:10,2
    created_at: timestamp
    updated_at: timestamp
    timestamps: true
    relationships:
      belongsTo: Order

controllers:
  Api\UserController:
    resource: api
    model: User
    methods:
      index:
        query: with:posts,orders
        response: resource
      show:
        query: with:posts,orders,comments
        response: resource
      store:
        validate: name,email,password
        response: resource
      update:
        validate: name,email
        response: resource
      destroy:
        response: success

  Api\PostController:
    resource: api
    model: Post
    methods:
      index:
        query: with:author,comments
        response: resource
      show:
        query: with:author,comments
        response: resource
      store:
        validate: title,content,author_id
        response: resource
      update:
        validate: title,content
        response: resource
      destroy:
        response: success

  Api\OrderController:
    resource: api
    model: Order
    methods:
      index:
        query: with:user,items
        response: resource
      show:
        query: with:user,items
        response: resource
      store:
        validate: user_id,total_amount,shipping_address
        response: resource
      update:
        validate: status
        response: resource
      destroy:
        response: success

dashboards:
  AdminDashboard:
    title: "Admin Dashboard"
    description: "Comprehensive administrative dashboard with analytics and management tools"
    layout: "admin"
    theme:
      primary_color: "#1f2937"
      secondary_color: "#6b7280"
      accent_color: "#3b82f6"
      background_color: "#f9fafb"
      text_color: "#1f2937"
      border_color: "#e5e7eb"
      success_color: "#10b981"
      warning_color: "#f59e0b"
      error_color: "#ef4444"
    permissions: 
      - "view-dashboard"
      - "manage-users"
      - "manage-posts"
      - "view-analytics"
      - "manage-orders"
    navigation:
      - name: "overview"
        title: "Overview"
        route: "/dashboard"
        icon: "home"
        permission: "view-dashboard"
      - name: "users"
        title: "Users"
        route: "/dashboard/users"
        icon: "users"
        permission: "manage-users"
      - name: "posts"
        title: "Posts"
        route: "/dashboard/posts"
        icon: "document-text"
        permission: "manage-posts"
      - name: "orders"
        title: "Orders"
        route: "/dashboard/orders"
        icon: "shopping-cart"
        permission: "manage-orders"
      - name: "analytics"
        title: "Analytics"
        route: "/dashboard/analytics"
        icon: "chart-bar"
        permission: "view-analytics"
      - name: "settings"
        title: "Settings"
        route: "/dashboard/settings"
        icon: "cog"
        permission: "manage-settings"
    widgets:
      UserStats:
        type: "metric"
        title: "Total Users"
        model: "User"
        config:
          format: "number"
          color: "blue"
          refresh_interval: 300
      RecentUsers:
        type: "table"
        title: "Recent Users"
        model: "User"
        config:
          limit: 10
          sort_by: "created_at"
          sort_order: "desc"
          columns: ["id", "name", "email", "created_at"]
      UserGrowth:
        type: "chart"
        title: "User Growth"
        model: "User"
        config:
          chart_type: "line"
          timeframe: "30d"
          refresh_interval: 600
      PostStats:
        type: "metric"
        title: "Total Posts"
        model: "Post"
        config:
          format: "number"
          color: "green"
          refresh_interval: 300
      RecentPosts:
        type: "table"
        title: "Recent Posts"
        model: "Post"
        config:
          limit: 10
          sort_by: "created_at"
          sort_order: "desc"
          columns: ["id", "title", "author.name", "status", "created_at"]
      PostStatus:
        type: "chart"
        title: "Post Status Distribution"
        model: "Post"
        config:
          chart_type: "pie"
          refresh_interval: 600
      OrderStats:
        type: "metric"
        title: "Total Orders"
        model: "Order"
        config:
          format: "currency"
          color: "purple"
          refresh_interval: 300
      RecentOrders:
        type: "table"
        title: "Recent Orders"
        model: "Order"
        config:
          limit: 10
          sort_by: "created_at"
          sort_order: "desc"
          columns: ["order_number", "user.name", "total_amount", "status", "created_at"]
      OrderStatus:
        type: "chart"
        title: "Order Status"
        model: "Order"
        config:
          chart_type: "bar"
          refresh_interval: 600
      RevenueChart:
        type: "chart"
        title: "Revenue Over Time"
        model: "Order"
        config:
          chart_type: "line"
          timeframe: "7d"
          refresh_interval: 900
      SystemHealth:
        type: "metric"
        title: "System Status"
        config:
          format: "status"
          color: "green"
          refresh_interval: 60
      ErrorLog:
        type: "list"
        title: "Recent Errors"
        config:
          limit: 5
          refresh_interval: 120

frontend:
  components:
    DashboardLayout:
      type: "layout"
      framework: "react"
      props:
        children: "React.ReactNode"
        dashboard: "Dashboard"
      features:
        - "responsive-sidebar"
        - "navigation-menu"
        - "user-menu"
        - "notifications"
        - "search"
        - "theme-switcher"
        - "plugin-integration"

    DashboardPage:
      type: "page"
      framework: "react"
      props:
        dashboard: "Dashboard"
        widgets: "WidgetData[]"
      features:
        - "widget-grid"
        - "real-time-updates"
        - "refresh-controls"
        - "error-handling"
        - "loading-states"

    MetricWidget:
      type: "component"
      framework: "react"
      props:
        data: "MetricWidgetData"
        config: "WidgetConfig"
        onRefresh: "() => void"
      features:
        - "trend-indicator"
        - "status-badge"
        - "refresh-button"
        - "loading-state"

    TableWidget:
      type: "component"
      framework: "react"
      props:
        data: "TableWidgetData"
        config: "WidgetConfig"
        onRefresh: "() => void"
      features:
        - "sortable-columns"
        - "pagination"
        - "filters"
        - "export-options"

    ChartWidget:
      type: "component"
      framework: "react"
      props:
        data: "ChartWidgetData"
        config: "WidgetConfig"
        onRefresh: "() => void"
      features:
        - "multiple-chart-types"
        - "interactive-tooltips"
        - "zoom-controls"
        - "export-chart"

    ListWidget:
      type: "component"
      framework: "react"
      props:
        data: "ListWidgetData"
        config: "WidgetConfig"
        onRefresh: "() => void"
      features:
        - "item-actions"
        - "status-indicators"
        - "load-more"
        - "search-filter"

api:
  resources:
    UserResource:
      model: "User"
      attributes: ["id", "name", "email", "email_verified_at", "created_at", "updated_at"]
      relationships: ["posts", "orders", "comments"]
      methods:
        - "toArray"
        - "toResponse"

    PostResource:
      model: "Post"
      attributes: ["id", "title", "content", "published_at", "status", "created_at", "updated_at"]
      relationships: ["author", "comments"]
      methods:
        - "toArray"
        - "toResponse"

    OrderResource:
      model: "Order"
      attributes: ["id", "order_number", "total_amount", "status", "shipping_address", "created_at", "updated_at"]
      relationships: ["user", "items"]
      methods:
        - "toArray"
        - "toResponse"

  form_requests:
    UserRequest:
      model: "User"
      rules:
        name: "required|string|max:400"
        email: "required|email|unique:users,email"
        password: "required|string|min:8"
      methods:
        - "authorize"
        - "rules"
        - "messages"

    PostRequest:
      model: "Post"
      rules:
        title: "required|string|max:400"
        content: "required|string"
        author_id: "required|exists:users,id"
        status: "required|in:draft,published,archived"
      methods:
        - "authorize"
        - "rules"
        - "messages"

    OrderRequest:
      model: "Order"
      rules:
        user_id: "required|exists:users,id"
        total_amount: "required|numeric|min:0"
        shipping_address: "required|string"
        status: "required|in:pending,processing,shipped,delivered,cancelled"
      methods:
        - "authorize"
        - "rules"
        - "messages"

policies:
  UserPolicy:
    model: "User"
    methods:
      viewAny: "return true"
      view: "return true"
      create: "return $user->hasPermissionTo('manage-users')"
      update: "return $user->hasPermissionTo('manage-users')"
      delete: "return $user->hasPermissionTo('manage-users')"

  PostPolicy:
    model: "Post"
    methods:
      viewAny: "return true"
      view: "return true"
      create: "return $user->hasPermissionTo('manage-posts')"
      update: "return $user->hasPermissionTo('manage-posts')"
      delete: "return $user->hasPermissionTo('manage-posts')"

  OrderPolicy:
    model: "Order"
    methods:
      viewAny: "return $user->hasPermissionTo('manage-orders')"
      view: "return $user->hasPermissionTo('manage-orders')"
      create: "return $user->hasPermissionTo('manage-orders')"
      update: "return $user->hasPermissionTo('manage-orders')"
      delete: "return $user->hasPermissionTo('manage-orders')"

seeders:
  UserSeeder:
    model: "User"
    count: 50
    data:
      name: "faker->name"
      email: "faker->unique->safeEmail"
      password: "Hash::make('password')"
      email_verified_at: "now"

  PostSeeder:
    model: "Post"
    count: 100
    data:
      title: "faker->sentence"
      content: "faker->paragraphs(3, true)"
      author_id: "User::inRandomOrder()->first()->id"
      status: "faker->randomElement(['draft', 'published', 'archived'])"
      published_at: "faker->optional()->dateTimeBetween('-1 year', 'now')"

  OrderSeeder:
    model: "Order"
    count: 200
    data:
      order_number: "faker->unique->numerify('ORD-#####')"
      user_id: "User::inRandomOrder()->first()->id"
      total_amount: "faker->randomFloat(2, 10, 1000)"
      status: "faker->randomElement(['pending', 'processing', 'shipped', 'delivered', 'cancelled'])"
      shipping_address: "faker->address"
      billing_address: "faker->address"

config:
  dashboard:
    cache_enabled: true
    cache_duration: 300
    real_time_updates: true
    auto_refresh_interval: 300
    max_widgets_per_row: 3
    enable_plugin_system: true
    analytics_enabled: true
    export_enabled: true
    notifications_enabled: true 